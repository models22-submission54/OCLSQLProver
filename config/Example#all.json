{
    "Datamodel": "School.json",
    "Timeout": 10000,
    "OCL2MSFOL": "OCL2MSFOL",
    "SQL2MSFOL": "SQL2MSFOL",
    "Testcases": [
        {
			"context": [],
			"invariants": [],
			"OCL": "true",
			"SQL": "SELECT TRUE"
		},
		{
            "context": [
                {
                    "name": "caller",
                    "type": "Lecturer"
                }
            ],
            "invariants": [],
            "OCL": "caller.students->isEmpty()", 
            "SQL": "SELECT NOT EXISTS (SELECT e.students FROM Enrolment AS e WHERE e.lecturers = caller)"
        },
        {
            "context": [
                {
                    "name": "self",
                    "type": "Student"
                }
            ],
            "invariants": [],
            "OCL": "self.age >= 18", 
            "SQL": "SELECT s.age >= 18 FROM Student AS s WHERE s.Student_id = self"
        },
        {   
            "context": [],
            "invariants": [
                "Student.allInstances()->forAll(s| not s.age.oclIsUndefined())",
                "Lecturer.allInstances()->forAll(l| not l.age.oclIsUndefined())"
            ],
            "OCL": "Student.allInstances()->forAll(s|s.lecturers->forAll(l|l.age > s.age))", 
            "SQL": "SELECT NOT EXISTS (SELECT 1 FROM (SELECT s.age, e.lecturers FROM Student AS s JOIN Enrolment AS e ON e.students = s.Student_id) AS temp JOIN Lecturer AS l WHERE temp.age >= l.age AND l.Lecturer_id = temp.lecturers)"
        },
        {
            "context": [
                {
                    "name": "self",
                    "type": "Student"
                },
                {
                    "name": "user",
                    "type": "String"
                }
            ],
            "invariants": [
                "Student.allInstances()->forAll(s|not s.age.oclIsUndefined())",
                "not user.oclIsUndefined()"
            ],
            "OCL": "self.name = user", 
            "SQL": "SELECT (SELECT s.name FROM Student AS s WHERE s.Student_id = self) = user"
        },
        {
            "context": [
                {
                    "name": "self",
                    "type": "Student"
                },
                {
                    "name": "user",
                    "type": "String"
                }
            ],
            "invariants": [
                "Student.allInstances()->forAll(s|not s.age.oclIsUndefined())",
                "not user.oclIsUndefined()"
            ],
            "OCL": "self.name = user", 
            "SQL": "SELECT s.name = user FROM Student AS s WHERE s.Student_id = self"
        },
        {
            "context": [
                {
                    "name": "self",
                    "type": "Student"
                },
                {
                    "name": "user",
                    "type": "String"
                }
            ],
            "invariants": [],
            "OCL": "self.name = user", 
            "SQL": "SELECT CASE WHEN s.name IS NULL THEN user IS NULL ELSE CASE WHEN user IS NULL THEN FALSE ELSE s.name = user END END FROM Student AS s WHERE s.Student_id = self"
        }
    ]
}